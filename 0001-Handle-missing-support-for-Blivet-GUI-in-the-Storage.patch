From 0f2309746934b048186aae206e9a28bc2aefccfa Mon Sep 17 00:00:00 2001
From: Vendula Poncova <vponcova@redhat.com>
Date: Wed, 6 Mar 2019 13:04:05 +0100
Subject: [PATCH 1/2] Handle missing support for Blivet-GUI in the Storage
 module (#1685645)

The Blivet partitioning module should be able to exist without support
for Blivet-GUI. In this case, the method SendRequest will raise the
UnsupportedPartitioningError exception.

In the future, we will raise this exception once the Blivet
partitioning is requested.

Resolves: rhbz#1685645
---
 pyanaconda/modules/common/errors/storage.py   |  6 ++
 .../modules/storage/partitioning/blivet.py    | 40 ++++++++--
 .../storage/partitioning/blivet_handler.py    | 77 +++++++++++++++++++
 .../storage/partitioning/blivet_interface.py  | 53 +------------
 4 files changed, 116 insertions(+), 60 deletions(-)
 create mode 100644 pyanaconda/modules/storage/partitioning/blivet_handler.py

diff --git a/pyanaconda/modules/common/errors/storage.py b/pyanaconda/modules/common/errors/storage.py
index cca48e3bd..3b6671430 100644
--- a/pyanaconda/modules/common/errors/storage.py
+++ b/pyanaconda/modules/common/errors/storage.py
@@ -37,3 +37,9 @@ class UnavailableDataError(AnacondaError):
 class InvalidStorageError(AnacondaError):
     """The storage model is not valid."""
     pass
+
+
+@dbus_error("UnsupportedPartitioningError", namespace=STORAGE_NAMESPACE)
+class UnsupportedPartitioningError(AnacondaError):
+    """The partitioning method is not supported."""
+    pass
diff --git a/pyanaconda/modules/storage/partitioning/blivet.py b/pyanaconda/modules/storage/partitioning/blivet.py
index 96539783e..6e47001b9 100644
--- a/pyanaconda/modules/storage/partitioning/blivet.py
+++ b/pyanaconda/modules/storage/partitioning/blivet.py
@@ -17,8 +17,6 @@
 # License and may only be used or replicated with the express permission of
 # Red Hat, Inc.
 #
-from blivetgui.osinstall import BlivetUtilsAnaconda
-
 from pyanaconda.anaconda_loggers import get_module_logger
 from pyanaconda.dbus import DBus
 from pyanaconda.modules.common.constants.objects import BLIVET_PARTITIONING
@@ -37,7 +35,8 @@ class BlivetPartitioningModule(PartitioningModule):
 
     def __init__(self):
         super().__init__()
-        self._handler = None
+        self._storage_handler = None
+        self._request_handler = None
 
     def publish(self):
         """Publish the module."""
@@ -47,14 +46,39 @@ class BlivetPartitioningModule(PartitioningModule):
     def storage_handler(self):
         """The handler of the storage.
 
-        :return: an instance of BlivetUtils
+        :return: an instance of BlivetStorageHandler
+        :raises UnsupportedPartitioningError: if the handler cannot be created
         """
-        if not self._handler:
-            self._handler = BlivetUtilsAnaconda()
+        if not self._storage_handler:
+            from pyanaconda.modules.storage.partitioning.blivet_handler import BlivetStorageHandler
+            self._storage_handler = BlivetStorageHandler()
 
         # Make sure that the handler always uses the current storage.
-        self._handler.storage = self.storage
-        return self._handler
+        self._storage_handler.storage = self.storage
+        return self._storage_handler
+
+    @property
+    def request_handler(self):
+        """The handler of the requests.
+
+        :return: an instance of BlivetRequestHandler
+        :raises UnsupportedPartitioningError: if the handler cannot be created
+        """
+        if not self._request_handler:
+            from pyanaconda.modules.storage.partitioning.blivet_handler import BlivetRequestHandler
+            self._request_handler = BlivetRequestHandler()
+
+        # Make sure that the handler always uses the current storage handler.
+        self._request_handler.blivet_utils = self.storage_handler
+        return self._request_handler
+
+    def send_request(self, data):
+        """Send a request to the storage handler.
+
+        :param data: a request data in bytes
+        :return: a reply data in bytes
+        """
+        return self.request_handler.get_reply(data)
 
     def configure_with_task(self):
         """Complete the scheduled partitioning."""
diff --git a/pyanaconda/modules/storage/partitioning/blivet_handler.py b/pyanaconda/modules/storage/partitioning/blivet_handler.py
new file mode 100644
index 000000000..494a2c6dc
--- /dev/null
+++ b/pyanaconda/modules/storage/partitioning/blivet_handler.py
@@ -0,0 +1,77 @@
+#
+# Handlers for the Blivet partitioning module.
+#
+# Copyright (C) 2019 Red Hat, Inc.
+#
+# This copyrighted material is made available to anyone wishing to use,
+# modify, copy, or redistribute it subject to the terms and conditions of
+# the GNU General Public License v.2, or (at your option) any later version.
+# This program is distributed in the hope that it will be useful, but WITHOUT
+# ANY WARRANTY expressed or implied, including the implied warranties of
+# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General
+# Public License for more details.  You should have received a copy of the
+# GNU General Public License along with this program; if not, write to the
+# Free Software Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA
+# 02110-1301, USA.  Any Red Hat trademarks that are incorporated in the
+# source code or documentation are not subject to the GNU General Public
+# License and may only be used or replicated with the express permission of
+# Red Hat, Inc.
+#
+import pickle
+from pyanaconda.modules.common.errors.storage import UnsupportedPartitioningError
+
+try:
+    # Fail if the support for Blivet-GUI is missing.
+    from blivetgui.communication.server import BlivetUtilsServer
+    from blivetgui.osinstall import BlivetUtilsAnaconda
+except ImportError as e:
+    raise UnsupportedPartitioningError("Missing support for Blivet-GUI") from e
+
+__all__ = ["BlivetStorageHandler", "BlivetRequestHandler"]
+
+
+class BlivetStorageHandler(BlivetUtilsAnaconda):
+    """The storage handler for the Blivet."""
+    pass
+
+
+class BlivetRequestHandler(BlivetUtilsServer):
+    """The request handler for the Blivet."""
+
+    def __init__(self):  # pylint: disable=super-init-not-called
+        self._data = None
+        self._result = None
+
+    def get_reply(self, request):
+        """Get a reply to a request."""
+        self._data = request
+
+        # Handle the request.
+        self.handle()
+
+        # Return the reply.
+        return self._result
+
+    def handle(self):
+        """Handle a message."""
+        msg = self._recv_msg()
+        unpickled_msg = pickle.loads(msg)
+
+        if unpickled_msg[0] == "call":
+            self._call_utils_method(unpickled_msg)
+        elif unpickled_msg[0] == "param":
+            self._get_param(unpickled_msg)
+        elif unpickled_msg[0] == "method":
+            self._call_method(unpickled_msg)
+        elif unpickled_msg[0] == "next":
+            self._get_next(unpickled_msg)
+        elif unpickled_msg[0] == "key":
+            self._get_key(unpickled_msg)
+
+    def _recv_msg(self):
+        """Receive a message from a client."""
+        return self._data
+
+    def _send(self, data):
+        """Send a message to a client."""
+        self._result = data
diff --git a/pyanaconda/modules/storage/partitioning/blivet_interface.py b/pyanaconda/modules/storage/partitioning/blivet_interface.py
index 406c00036..c03b7ec1d 100644
--- a/pyanaconda/modules/storage/partitioning/blivet_interface.py
+++ b/pyanaconda/modules/storage/partitioning/blivet_interface.py
@@ -17,9 +17,6 @@
 # License and may only be used or replicated with the express permission of
 # Red Hat, Inc.
 #
-import pickle
-
-from blivetgui.communication.server import BlivetUtilsServer
 
 from pyanaconda.dbus.interface import dbus_interface
 from pyanaconda.dbus.typing import *  # pylint: disable=wildcard-import
@@ -31,58 +28,10 @@ from pyanaconda.modules.storage.partitioning.base_interface import PartitioningI
 class BlivetPartitioningInterface(PartitioningInterface):
     """DBus interface for the Blivet partitioning module."""
 
-    def __init__(self, implementation):
-        """Initialize the interface."""
-        super().__init__(implementation)
-        self._request_handler = BlivetRequestHandler()
-
     def SendRequest(self, data: List[Byte]) -> List[Byte]:
         """Send a request to the storage handler.
 
         :param data: a request data in bytes
         :return: a reply data in bytes
         """
-        return self._request_handler.get_reply(bytes(data), self.implementation.storage_handler)
-
-
-class BlivetRequestHandler(BlivetUtilsServer):
-    """The request handler for the Blivet."""
-
-    def __init__(self):  # pylint: disable=super-init-not-called
-        self._data = None
-        self._result = None
-
-    def get_reply(self, request, utils):
-        """Get a reply to a request."""
-        self.blivet_utils = utils
-        self._data = request
-
-        # Handle the request.
-        self.handle()
-
-        # Return the reply.
-        return self._result
-
-    def handle(self):
-        """Handle a message."""
-        msg = self._recv_msg()
-        unpickled_msg = pickle.loads(msg)
-
-        if unpickled_msg[0] == "call":
-            self._call_utils_method(unpickled_msg)
-        elif unpickled_msg[0] == "param":
-            self._get_param(unpickled_msg)
-        elif unpickled_msg[0] == "method":
-            self._call_method(unpickled_msg)
-        elif unpickled_msg[0] == "next":
-            self._get_next(unpickled_msg)
-        elif unpickled_msg[0] == "key":
-            self._get_key(unpickled_msg)
-
-    def _recv_msg(self):
-        """Receive a message from a client."""
-        return self._data
-
-    def _send(self, data):
-        """Send a message to a client."""
-        self._result = data
+        return self._implementation.send_request(bytes(data))
-- 
2.20.1

